/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SurahIndexRouteImport } from './routes/surah/index'
import { Route as SurahIdRouteImport } from './routes/surah/$id'
import { Route as ApiTranslationsRouteImport } from './routes/api.translations'
import { Route as ApiSurahRouteImport } from './routes/api.surah'
import { Route as ApiRecitationsRouteImport } from './routes/api.recitations'
import { Route as ApiQuranChatRouteImport } from './routes/api.quran-chat'
import { Route as ApiLanguagesRouteImport } from './routes/api.languages'
import { Route as ApiVersesChapterNumberRouteImport } from './routes/api.verses.$chapterNumber'
import { Route as ApiFootnoteIdRouteImport } from './routes/api.footnote.$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SurahIndexRoute = SurahIndexRouteImport.update({
  id: '/surah/',
  path: '/surah/',
  getParentRoute: () => rootRouteImport,
} as any)
const SurahIdRoute = SurahIdRouteImport.update({
  id: '/surah/$id',
  path: '/surah/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTranslationsRoute = ApiTranslationsRouteImport.update({
  id: '/api/translations',
  path: '/api/translations',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSurahRoute = ApiSurahRouteImport.update({
  id: '/api/surah',
  path: '/api/surah',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiRecitationsRoute = ApiRecitationsRouteImport.update({
  id: '/api/recitations',
  path: '/api/recitations',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiQuranChatRoute = ApiQuranChatRouteImport.update({
  id: '/api/quran-chat',
  path: '/api/quran-chat',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiLanguagesRoute = ApiLanguagesRouteImport.update({
  id: '/api/languages',
  path: '/api/languages',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiVersesChapterNumberRoute = ApiVersesChapterNumberRouteImport.update({
  id: '/api/verses/$chapterNumber',
  path: '/api/verses/$chapterNumber',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiFootnoteIdRoute = ApiFootnoteIdRouteImport.update({
  id: '/api/footnote/$id',
  path: '/api/footnote/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api/languages': typeof ApiLanguagesRoute
  '/api/quran-chat': typeof ApiQuranChatRoute
  '/api/recitations': typeof ApiRecitationsRoute
  '/api/surah': typeof ApiSurahRoute
  '/api/translations': typeof ApiTranslationsRoute
  '/surah/$id': typeof SurahIdRoute
  '/surah': typeof SurahIndexRoute
  '/api/footnote/$id': typeof ApiFootnoteIdRoute
  '/api/verses/$chapterNumber': typeof ApiVersesChapterNumberRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/languages': typeof ApiLanguagesRoute
  '/api/quran-chat': typeof ApiQuranChatRoute
  '/api/recitations': typeof ApiRecitationsRoute
  '/api/surah': typeof ApiSurahRoute
  '/api/translations': typeof ApiTranslationsRoute
  '/surah/$id': typeof SurahIdRoute
  '/surah': typeof SurahIndexRoute
  '/api/footnote/$id': typeof ApiFootnoteIdRoute
  '/api/verses/$chapterNumber': typeof ApiVersesChapterNumberRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api/languages': typeof ApiLanguagesRoute
  '/api/quran-chat': typeof ApiQuranChatRoute
  '/api/recitations': typeof ApiRecitationsRoute
  '/api/surah': typeof ApiSurahRoute
  '/api/translations': typeof ApiTranslationsRoute
  '/surah/$id': typeof SurahIdRoute
  '/surah/': typeof SurahIndexRoute
  '/api/footnote/$id': typeof ApiFootnoteIdRoute
  '/api/verses/$chapterNumber': typeof ApiVersesChapterNumberRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api/languages'
    | '/api/quran-chat'
    | '/api/recitations'
    | '/api/surah'
    | '/api/translations'
    | '/surah/$id'
    | '/surah'
    | '/api/footnote/$id'
    | '/api/verses/$chapterNumber'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api/languages'
    | '/api/quran-chat'
    | '/api/recitations'
    | '/api/surah'
    | '/api/translations'
    | '/surah/$id'
    | '/surah'
    | '/api/footnote/$id'
    | '/api/verses/$chapterNumber'
  id:
    | '__root__'
    | '/'
    | '/api/languages'
    | '/api/quran-chat'
    | '/api/recitations'
    | '/api/surah'
    | '/api/translations'
    | '/surah/$id'
    | '/surah/'
    | '/api/footnote/$id'
    | '/api/verses/$chapterNumber'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiLanguagesRoute: typeof ApiLanguagesRoute
  ApiQuranChatRoute: typeof ApiQuranChatRoute
  ApiRecitationsRoute: typeof ApiRecitationsRoute
  ApiSurahRoute: typeof ApiSurahRoute
  ApiTranslationsRoute: typeof ApiTranslationsRoute
  SurahIdRoute: typeof SurahIdRoute
  SurahIndexRoute: typeof SurahIndexRoute
  ApiFootnoteIdRoute: typeof ApiFootnoteIdRoute
  ApiVersesChapterNumberRoute: typeof ApiVersesChapterNumberRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/surah/': {
      id: '/surah/'
      path: '/surah'
      fullPath: '/surah'
      preLoaderRoute: typeof SurahIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/surah/$id': {
      id: '/surah/$id'
      path: '/surah/$id'
      fullPath: '/surah/$id'
      preLoaderRoute: typeof SurahIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/translations': {
      id: '/api/translations'
      path: '/api/translations'
      fullPath: '/api/translations'
      preLoaderRoute: typeof ApiTranslationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/surah': {
      id: '/api/surah'
      path: '/api/surah'
      fullPath: '/api/surah'
      preLoaderRoute: typeof ApiSurahRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/recitations': {
      id: '/api/recitations'
      path: '/api/recitations'
      fullPath: '/api/recitations'
      preLoaderRoute: typeof ApiRecitationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/quran-chat': {
      id: '/api/quran-chat'
      path: '/api/quran-chat'
      fullPath: '/api/quran-chat'
      preLoaderRoute: typeof ApiQuranChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/languages': {
      id: '/api/languages'
      path: '/api/languages'
      fullPath: '/api/languages'
      preLoaderRoute: typeof ApiLanguagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/verses/$chapterNumber': {
      id: '/api/verses/$chapterNumber'
      path: '/api/verses/$chapterNumber'
      fullPath: '/api/verses/$chapterNumber'
      preLoaderRoute: typeof ApiVersesChapterNumberRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/footnote/$id': {
      id: '/api/footnote/$id'
      path: '/api/footnote/$id'
      fullPath: '/api/footnote/$id'
      preLoaderRoute: typeof ApiFootnoteIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiLanguagesRoute: ApiLanguagesRoute,
  ApiQuranChatRoute: ApiQuranChatRoute,
  ApiRecitationsRoute: ApiRecitationsRoute,
  ApiSurahRoute: ApiSurahRoute,
  ApiTranslationsRoute: ApiTranslationsRoute,
  SurahIdRoute: SurahIdRoute,
  SurahIndexRoute: SurahIndexRoute,
  ApiFootnoteIdRoute: ApiFootnoteIdRoute,
  ApiVersesChapterNumberRoute: ApiVersesChapterNumberRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
